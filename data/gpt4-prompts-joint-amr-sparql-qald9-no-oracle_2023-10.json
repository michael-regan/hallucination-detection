[
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 136 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 136 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 136 allowed relations, and only from the list of 136 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.62, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.37, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.65, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.31, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.47, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.29, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.78, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.17, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.73, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.07, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.5, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.48, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.71, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.23, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.78, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.15, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "who developed skype"
            }
        ],
        "gold_amr": "(d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "question": "who developed skype",
        "language": "en",
        "manipulated": 0,
        "rel_excluded": ""
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.66, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.34, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.53, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.39, 'relations': ['country', 'location'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.95, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.04, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.74, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.25, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.49, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.09, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.53, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.25, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.86, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.14, 'relations': ['team', 'height'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.41, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.37, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "who developed skype"
            }
        ],
        "gold_amr": "(d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "question": "who developed skype",
        "language": "en",
        "manipulated": 1,
        "rel_excluded": "developer"
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 136 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 136 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 136 allowed relations, and only from the list of 136 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.39, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.34, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.66, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.3, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.5, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.29, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.52, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.27, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.62, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.11, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.45, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.28, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.65, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.25, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.89, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.06, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "quién desarrolló skype"
            }
        ],
        "gold_amr": "(d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "question": "quién desarrolló skype",
        "language": "es",
        "manipulated": 0,
        "rel_excluded": ""
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.62, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.23, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.58, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.27, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.94, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.03, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.71, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.19, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.98, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.01, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.56, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.36, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.56, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.44, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.6, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.32, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "quién desarrolló skype"
            }
        ],
        "gold_amr": "(d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "question": "quién desarrolló skype",
        "language": "es",
        "manipulated": 1,
        "rel_excluded": "developer"
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 136 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 136 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 136 allowed relations, and only from the list of 136 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.63, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.2, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.86, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.11, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.59, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.36, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.63, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.24, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.77, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.06, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.66, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.25, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.38, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.33, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.84, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.08, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "wer hat skype entwickelt"
            }
        ],
        "gold_amr": "(d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "question": "wer hat skype entwickelt",
        "language": "de",
        "manipulated": 0,
        "rel_excluded": ""
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.67, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.27, 'relations': ['publisher'], 'verification': [True]}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.64, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.22, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.82, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.13, 'relations': ['leaderName'], 'verification': [True]}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.36, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.35, 'relations': ['director', 'starring'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.5, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.11, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.85, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.08, 'relations': ['spouse', 'child'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.7, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.17, 'relations': ['team', 'height'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.57, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.32, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "wer hat skype entwickelt"
            }
        ],
        "gold_amr": "(d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "question": "wer hat skype entwickelt",
        "language": "de",
        "manipulated": 1,
        "rel_excluded": "developer"
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 136 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 136 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 136 allowed relations, and only from the list of 136 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.6, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.27, 'relations': ['publisher'], 'verification': [True]}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.67, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.17, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.68, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.25, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.5, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.47, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.64, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.09, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.5, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.4, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.48, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.4, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.7, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.2, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "кто разработал skype"
            }
        ],
        "gold_amr": "(d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "question": "кто разработал skype",
        "language": "ru",
        "manipulated": 0,
        "rel_excluded": ""
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.62, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.36, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.53, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.45, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.55, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.4, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.47, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.31, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.45, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.31, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.74, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.25, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.44, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.38, 'relations': ['team', 'height'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.55, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.27, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "кто разработал skype"
            }
        ],
        "gold_amr": "(d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "question": "кто разработал skype",
        "language": "ru",
        "manipulated": 1,
        "rel_excluded": "developer"
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 136 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 136 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 136 allowed relations, and only from the list of 136 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.78, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.14, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.75, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.18, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.6, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.39, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.58, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.34, 'relations': ['director', 'starring'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.67, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.09, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.68, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.18, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.46, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.32, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.58, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.23, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "qui a développé skype "
            }
        ],
        "gold_amr": "(d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "question": "qui a développé skype ",
        "language": "fr",
        "manipulated": 0,
        "rel_excluded": ""
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.44, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.37, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.42, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.4, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.78, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.12, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.62, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.27, 'relations': ['director', 'starring'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.7, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.09, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.66, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.2, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.49, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.45, 'relations': ['team', 'height'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.43, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.31, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "qui a développé skype "
            }
        ],
        "gold_amr": "(d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "question": "qui a développé skype ",
        "language": "fr",
        "manipulated": 1,
        "rel_excluded": "developer"
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 136 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 136 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 136 allowed relations, and only from the list of 136 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.41, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.41, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.38, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.36, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.72, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.19, 'relations': ['leaderName'], 'verification': [True]}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.56, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.43, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.75, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.06, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.76, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.18, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.52, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.38, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.59, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.22, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "kas sukūrė „skype“"
            }
        ],
        "gold_amr": "(d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "question": "kas sukūrė „skype“",
        "language": "lt",
        "manipulated": 0,
        "rel_excluded": ""
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.39, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.3, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.78, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.12, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.45, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.36, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.72, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.19, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.51, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.11, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.78, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.12, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.66, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.21, 'relations': ['team', 'height'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.63, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.24, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "kas sukūrė „skype“"
            }
        ],
        "gold_amr": "(d / develop-02 :ARG0 (a / amr-unknown) :ARG1 (p / product :name (n / name :op1 \"Skype\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Skype dbo:developer ?uri. }",
        "question": "kas sukūrė „skype“",
        "language": "lt",
        "manipulated": 1,
        "rel_excluded": "developer"
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 136 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 136 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 136 allowed relations, and only from the list of 136 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.61, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.3, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.42, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.31, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.75, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.15, 'relations': ['leaderName'], 'verification': [True]}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.81, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.1, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.46, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.13, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.52, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.36, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.8, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.16, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.63, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.28, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "which airports does air china serve"
            }
        ],
        "gold_amr": "(s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "question": "which airports does air china serve",
        "language": "en",
        "manipulated": 0,
        "rel_excluded": ""
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.76, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.18, 'relations': ['publisher'], 'verification': [True]}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.44, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.4, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.51, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.29, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.46, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.39, 'relations': ['director', 'starring'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.85, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.05, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.44, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.36, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.86, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.09, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.51, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.33, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "which airports does air china serve"
            }
        ],
        "gold_amr": "(s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "question": "which airports does air china serve",
        "language": "en",
        "manipulated": 1,
        "rel_excluded": "targetAirport"
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 136 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 136 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 136 allowed relations, and only from the list of 136 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.55, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.28, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.59, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.24, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.69, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.18, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.78, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.19, 'relations': ['director', 'starring'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.44, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.38, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.44, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.29, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.54, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.4, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.62, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.21, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "en qué aeropuertos opera air china"
            }
        ],
        "gold_amr": "(s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "question": "en qué aeropuertos opera air china",
        "language": "es",
        "manipulated": 0,
        "rel_excluded": ""
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.62, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.27, 'relations': ['publisher'], 'verification': [True]}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.53, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.47, 'relations': ['country', 'location'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.72, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.2, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.63, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.31, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.5, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.45, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.43, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.42, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.63, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.35, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.67, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.3, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "en qué aeropuertos opera air china"
            }
        ],
        "gold_amr": "(s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "question": "en qué aeropuertos opera air china",
        "language": "es",
        "manipulated": 1,
        "rel_excluded": "targetAirport"
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 136 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 136 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 136 allowed relations, and only from the list of 136 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.51, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.44, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.44, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.29, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.62, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.21, 'relations': ['leaderName'], 'verification': [True]}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.51, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.3, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.54, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.1, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.49, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.47, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.44, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.35, 'relations': ['team', 'height'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.52, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.44, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "welche flughäfen bedient air china"
            }
        ],
        "gold_amr": "(s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "question": "welche flughäfen bedient air china",
        "language": "de",
        "manipulated": 0,
        "rel_excluded": ""
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.59, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.37, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.4, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.31, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.57, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.34, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.77, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.19, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.88, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.03, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.42, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.32, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.46, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.38, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.5, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.38, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "welche flughäfen bedient air china"
            }
        ],
        "gold_amr": "(s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "question": "welche flughäfen bedient air china",
        "language": "de",
        "manipulated": 1,
        "rel_excluded": "targetAirport"
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 136 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 136 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 136 allowed relations, and only from the list of 136 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.64, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.35, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.54, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.39, 'relations': ['country', 'location'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.58, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.35, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.77, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.13, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.55, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.11, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.68, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.27, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.84, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.12, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.71, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.27, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "какие аэропорты обслуживает air china"
            }
        ],
        "gold_amr": "(s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "question": "какие аэропорты обслуживает air china",
        "language": "ru",
        "manipulated": 0,
        "rel_excluded": ""
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.82, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.14, 'relations': ['publisher'], 'verification': [True]}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.62, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.26, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.57, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.4, 'relations': ['leaderName'], 'verification': [True]}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.87, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.08, 'relations': ['director', 'starring'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.64, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.07, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.42, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.38, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.66, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.21, 'relations': ['team', 'height'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.51, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.28, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "какие аэропорты обслуживает air china"
            }
        ],
        "gold_amr": "(s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "question": "какие аэропорты обслуживает air china",
        "language": "ru",
        "manipulated": 1,
        "rel_excluded": "targetAirport"
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 136 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 136 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 136 allowed relations, and only from the list of 136 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.84, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.12, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.63, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.28, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.64, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.18, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.4, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.36, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.44, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.1, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.34, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.34, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.43, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.41, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.73, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.16, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "quels aéroports sont desservis par air china "
            }
        ],
        "gold_amr": "(s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "question": "quels aéroports sont desservis par air china ",
        "language": "fr",
        "manipulated": 0,
        "rel_excluded": ""
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.61, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.34, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.45, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.38, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.43, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.41, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.51, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.4, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.76, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.18, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.68, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.3, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.44, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.37, 'relations': ['team', 'height'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.41, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.33, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "quels aéroports sont desservis par air china "
            }
        ],
        "gold_amr": "(s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "question": "quels aéroports sont desservis par air china ",
        "language": "fr",
        "manipulated": 1,
        "rel_excluded": "targetAirport"
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 136 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 136 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 136 allowed relations, and only from the list of 136 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.72, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.21, 'relations': ['publisher'], 'verification': [True]}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.53, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.38, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.81, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.11, 'relations': ['leaderName'], 'verification': [True]}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.66, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.2, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.61, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.07, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.89, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.1, 'relations': ['spouse', 'child'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.37, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.35, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.64, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.19, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "oro uostai kuriuos aptarnauja „air china“"
            }
        ],
        "gold_amr": "(s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "question": "oro uostai kuriuos aptarnauja „air china“",
        "language": "lt",
        "manipulated": 0,
        "rel_excluded": ""
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.75, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.19, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.4, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.31, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.53, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.32, 'relations': ['leaderName'], 'verification': [True]}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.46, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.28, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.49, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.14, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.58, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.29, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.84, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.11, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.63, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.23, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "oro uostai kuriuos aptarnauja „air china“"
            }
        ],
        "gold_amr": "(s / serve-01 :ARG0 (c / company :name (n / name :op1 \"Air\" :op2 \"China\")) :ARG2 (a / airport :mod (a2 / amr-unknown)))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Air_China dbo:targetAirport ?uri }",
        "question": "oro uostai kuriuos aptarnauja „air china“",
        "language": "lt",
        "manipulated": 1,
        "rel_excluded": "targetAirport"
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 136 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 136 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 136 allowed relations, and only from the list of 136 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.51, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.42, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.53, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.24, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.63, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.31, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.52, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.46, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.79, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.04, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.46, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.46, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.42, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.37, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.72, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.15, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "what are the official languages of the philippines"
            }
        ],
        "gold_amr": "(l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "question": "what are the official languages of the philippines",
        "language": "en",
        "manipulated": 0,
        "rel_excluded": ""
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.67, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.3, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.82, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.13, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.75, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.16, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.58, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.21, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.6, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.34, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.57, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.41, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.78, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.12, 'relations': ['team', 'height'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.75, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.17, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "what are the official languages of the philippines"
            }
        ],
        "gold_amr": "(l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "question": "what are the official languages of the philippines",
        "language": "en",
        "manipulated": 1,
        "rel_excluded": "officialLanguage"
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 136 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 136 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 136 allowed relations, and only from the list of 136 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.39, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.31, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.78, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.13, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.71, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.16, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.68, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.26, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.76, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.07, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.36, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.34, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.39, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.31, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.4, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.32, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "cuáles son los idiomas oficiales de filipinas"
            }
        ],
        "gold_amr": "(l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "question": "cuáles son los idiomas oficiales de filipinas",
        "language": "es",
        "manipulated": 0,
        "rel_excluded": ""
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.9, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.07, 'relations': ['publisher'], 'verification': [True]}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.84, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.1, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.53, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.41, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.83, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.16, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.8, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.06, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.71, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.2, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.4, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.34, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.54, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.31, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "cuáles son los idiomas oficiales de filipinas"
            }
        ],
        "gold_amr": "(l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "question": "cuáles son los idiomas oficiales de filipinas",
        "language": "es",
        "manipulated": 1,
        "rel_excluded": "officialLanguage"
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 136 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 136 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 136 allowed relations, and only from the list of 136 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.56, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.4, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.58, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.39, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.53, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.46, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.65, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.21, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.58, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.09, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.4, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.33, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.57, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.31, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.44, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.36, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "was ist die amtssprache auf den philippinen"
            }
        ],
        "gold_amr": "(l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "question": "was ist die amtssprache auf den philippinen",
        "language": "de",
        "manipulated": 0,
        "rel_excluded": ""
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.52, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.47, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.87, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.11, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.4, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.31, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.55, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.3, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.48, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.11, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.58, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.4, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.78, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.15, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.55, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.25, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "was ist die amtssprache auf den philippinen"
            }
        ],
        "gold_amr": "(l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "question": "was ist die amtssprache auf den philippinen",
        "language": "de",
        "manipulated": 1,
        "rel_excluded": "officialLanguage"
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 136 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 136 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 136 allowed relations, and only from the list of 136 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.62, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.34, 'relations': ['publisher'], 'verification': [True]}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.6, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.34, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.7, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.25, 'relations': ['leaderName'], 'verification': [True]}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.45, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.32, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.53, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.41, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.74, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.26, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.93, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.07, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.52, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.46, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "какие официальные языки на филлипинах"
            }
        ],
        "gold_amr": "(l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "question": "какие официальные языки на филлипинах",
        "language": "ru",
        "manipulated": 0,
        "rel_excluded": ""
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.48, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.29, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.5, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.35, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.59, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.31, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.78, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.18, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.81, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.12, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.8, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.17, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.55, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.37, 'relations': ['team', 'height'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.74, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.16, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "какие официальные языки на филлипинах"
            }
        ],
        "gold_amr": "(l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "question": "какие официальные языки на филлипинах",
        "language": "ru",
        "manipulated": 1,
        "rel_excluded": "officialLanguage"
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 136 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 136 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 136 allowed relations, and only from the list of 136 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.55, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.3, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.73, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.17, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.48, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.31, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.69, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.26, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.48, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.14, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.46, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.37, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.5, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.39, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.61, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.31, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "quels sont les langues officielles des philippines "
            }
        ],
        "gold_amr": "(l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "question": "quels sont les langues officielles des philippines ",
        "language": "fr",
        "manipulated": 0,
        "rel_excluded": ""
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.7, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.17, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.81, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.17, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.44, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.31, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.62, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.3, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.62, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.12, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.63, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.23, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.88, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.1, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.88, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.06, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "quels sont les langues officielles des philippines "
            }
        ],
        "gold_amr": "(l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "question": "quels sont les langues officielles des philippines ",
        "language": "fr",
        "manipulated": 1,
        "rel_excluded": "officialLanguage"
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 136 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 136 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 136 allowed relations, and only from the list of 136 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.52, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.47, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.62, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.3, 'relations': ['country', 'location'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.58, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.21, 'relations': ['leaderName'], 'verification': [True]}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.68, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.26, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.88, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.03, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.66, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.2, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.62, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.36, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.61, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.28, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "kokios yra oficialios filipinų kalbos"
            }
        ],
        "gold_amr": "(l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "question": "kokios yra oficialios filipinų kalbos",
        "language": "lt",
        "manipulated": 0,
        "rel_excluded": ""
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.71, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.26, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.71, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.27, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.52, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.29, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.52, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.34, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.64, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.33, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.52, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.47, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.64, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.31, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.79, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.14, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "kokios yra oficialios filipinų kalbos"
            }
        ],
        "gold_amr": "(l / language :mod (o / official) :domain (a / amr-unknown) :poss (c / country :name (n / name :op1 \"Philippines\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Philippines dbo:officialLanguage ?uri }",
        "question": "kokios yra oficialios filipinų kalbos",
        "language": "lt",
        "manipulated": 1,
        "rel_excluded": "officialLanguage"
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 136 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 136 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 136 allowed relations, and only from the list of 136 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.45, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.44, 'relations': ['publisher'], 'verification': [True]}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.56, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.36, 'relations': ['country', 'location'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.47, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.39, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.75, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.2, 'relations': ['director', 'starring'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.47, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.15, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.5, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.45, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.8, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.15, 'relations': ['team', 'height'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.62, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.34, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "who is the owner of universal studios"
            }
        ],
        "gold_amr": "(o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "question": "who is the owner of universal studios",
        "language": "en",
        "manipulated": 0,
        "rel_excluded": ""
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.51, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.48, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.48, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.37, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.9, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.05, 'relations': ['leaderName'], 'verification': [True]}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.38, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.37, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.6, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.13, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.63, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.27, 'relations': ['spouse', 'child'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.52, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.3, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.49, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.27, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "who is the owner of universal studios"
            }
        ],
        "gold_amr": "(o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "question": "who is the owner of universal studios",
        "language": "en",
        "manipulated": 1,
        "rel_excluded": "owner"
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 136 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'owner', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 136 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 136 allowed relations, and only from the list of 136 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.42, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.34, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.69, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.19, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.45, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.31, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.44, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.44, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.53, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.11, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.56, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.33, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.64, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.31, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.59, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.32, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "quién es el dueño de universal studios"
            }
        ],
        "gold_amr": "(o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "question": "quién es el dueño de universal studios",
        "language": "es",
        "manipulated": 0,
        "rel_excluded": ""
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.64, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.3, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.55, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.34, 'relations': ['country', 'location'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.55, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.26, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.64, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.27, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.86, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.04, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.57, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.32, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.68, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.28, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.6, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.23, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "quién es el dueño de universal studios"
            }
        ],
        "gold_amr": "(o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "question": "quién es el dueño de universal studios",
        "language": "es",
        "manipulated": 1,
        "rel_excluded": "owner"
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.49, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.47, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.53, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.46, 'relations': ['country', 'location'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.41, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.33, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.64, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.31, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.64, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.08, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.48, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.29, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.57, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.22, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.56, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.31, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "wem gehören die universal studios"
            }
        ],
        "gold_amr": "(o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "question": "wem gehören die universal studios",
        "language": "de",
        "manipulated": 1,
        "rel_excluded": "owner"
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.78, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.2, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.67, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.22, 'relations': ['country', 'location'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.61, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.32, 'relations': ['leaderName'], 'verification': [True]}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.87, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.11, 'relations': ['director', 'starring'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.71, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.22, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.49, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.43, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.5, 'relations': ['team', 'height'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.38, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.72, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.22, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "кто является владельцем universal studios"
            }
        ],
        "gold_amr": "(o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "question": "кто является владельцем universal studios",
        "language": "ru",
        "manipulated": 1,
        "rel_excluded": "owner"
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.69, 'relations': ['publisher'], 'verification': [True]}, {'rank': 2, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.3, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.61, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.24, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.71, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.22, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.63, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.35, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.8, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.05, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.51, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.39, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.58, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.29, 'relations': ['team', 'height'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.85, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.14, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "qui est le propriétaire de universal studios"
            }
        ],
        "gold_amr": "(o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "question": "qui est le propriétaire de universal studios",
        "language": "fr",
        "manipulated": 1,
        "rel_excluded": "owner"
    },
    {
        "messages": [
            {
                "role": "system",
                "content": "You are Joint-AMR-SPARQL-Parser-GPT, a language model that is an expert at jointly parsing Abstract Meaning Representation (AMR) graphs and SPARQL queries for natural language questions."
            },
            {
                "role": "system",
                "content": "With this joint model, for each question generate a n-best list of candidate parses in a shared AMR-SPARQL space."
            },
            {
                "role": "system",
                "content": "Definitions and examples of AMRs are found at this url <https://www.isi.edu/~ulf/amr/lib/amr-dict.html>."
            },
            {
                "role": "system",
                "content": "For the SPARQL query, contained within the following list of sparql_allowed_relations, you will find 135 items. Select SPARQL relations only from this list!"
            },
            {
                "role": "system",
                "content": "sparql_allowed_relations=['abbreviation', 'activeYearsEndDate', 'actor', 'airline', 'album', 'alias', 'alliance', 'almaMater', 'animal', 'architect', 'areaTotal', 'artist', 'assembly', 'author', 'award', 'battle', 'birthDate', 'birthName', 'birthPlace', 'book', 'bSide', 'budget', 'building', 'capacity', 'capital', 'child', 'children', 'city', 'company', 'completionDate', 'conservationStatus', 'country', 'creator', 'crosses', 'currency', 'currencyCode', 'date', 'deathCause', 'deathDate', 'deathPlace', 'designer', 'developer', 'director', 'draftTeam', 'editor', 'elevation', 'established', 'field', 'film', 'floorCount', 'formationYear', 'foundationPlace', 'foundedBy', 'foundingDate', 'foundingYear', 'genre', 'governmentType', 'governor', 'ground', 'headquarter', 'height', 'highest', 'industry', 'inflow', 'influenced', 'influencedBy', 'ingredient', 'instrument', 'isPartOf', 'knownFor', 'lake', 'language', 'languageFamily', 'largestCity', 'launchPad', 'leader', 'leaderName', 'league', 'length', 'locatedInArea', 'location', 'locationCity', 'locationCountry', 'manufacturer', 'maximumDepth', 'mayor', 'mission', 'museum', 'musicalArtist', 'musicBy', 'musicComposer', 'nationality', 'numberOfEmployees', 'numberOfEpisodes', 'numberOfPages', 'occupation', 'office', 'officialLanguage', 'operator', 'organisation', 'origin', 'parent', 'person', 'place', 'politician', 'populationTotal', 'portrayer', 'producer', 'product', 'profession', 'programmingLanguage', 'publisher', 'recordLabel', 'releaseDate', 'residence', 'restingPlace', 'river', 'scientist', 'seasonNumber', 'series', 'sourceCountry', 'spokenIn', 'spouse', 'starring', 'subsidiary', 'successor', 'targetAirport', 'team', 'timeZone', 'title', 'university', 'weapon', 'wikiPageRedirects', 'writer', 'leaderName']."
            },
            {
                "role": "system",
                "content": "Make a Python list of all relations in each predicted SPARQL query. Check that all relations are in allowed_relation_list, reporting verification of True or False for each relation."
            },
            {
                "role": "system",
                "content": "Report a ranked list of the 2-best candidates each with a score of how confident the model is. The 2-best candidates may both be AMRs, or both SPARQL, or a combination of these."
            },
            {
                "role": "system",
                "content": "Your confidence scores should precisely reflect the capabilities of the Joint-AMR-SPARQL-Parser-GPT model. When a SPARQL query contains relations from the list of 135 relations, rank the SPARQL higher than the AMR. When the SPARQL query is likely incorrect or contains relations that are not in the list, rank the AMR higher, as in Example-5 and Example-8."
            },
            {
                "role": "system",
                "content": "For each task herein described, you must select from the list of 135 allowed relations, and only from the list of 135 relations, to complete said task. Failure to complete said task using only the relations listed will result in consequences to be determined at the sole discretion of the testor."
            },
            {
                "role": "user",
                "content": "Example-1: list all boardgames by gmt"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(l / list-01 :mode imperative :ARG0 (y / you) :ARG1 (b / boardgame :mod (a / all) :prep-by (c / company :name (n / name :op1 \"GMT\"))))', 'type': 'AMR', 'confidence': 0.88, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT ?uri WHERE { ?uri dbo:publisher res:GMT_Games }', 'type': 'SPARQL', 'confidence': 0.11, 'relations': ['publisher'], 'verification': [True]}]"
            },
            {
                "role": "user",
                "content": "Example-2: in which us state is area 51 located"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/>  SELECT DISTINCT ?uri WHERE { res:Area_51 dbo:location ?uri . ?uri dbo:country res:United_States. }', 'type': 'SPARQL', 'confidence': 0.49, 'relations': ['country', 'location'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(l / locate-01 :ARG1 (f / facility :name (n / name :op1 \"Area\" :op2 \"51\")) :location (s / state :mod (a / amr-unknown) :mod (c / country :name (n2 / name :op1 \"U.S.\"))))', 'type': 'AMR', 'confidence': 0.28, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-3: quién es el alcalde de la cuidad de nueva york"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:New_York_City dbo:leaderName ?uri }', 'type': 'SPARQL', 'confidence': 0.78, 'relations': ['leaderName'], 'verification': [True]}, {'rank': 2, 'prediction': '(h / have-org-role-91 :ARG0 (a / amr-unknown) :ARG1 (c / city :name (n / name :op1 \"New\" :op2 \"York\" :op3 \"City\")) :ARG2 (m / mayor))', 'type': 'AMR', 'confidence': 0.17, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-4: give me all actors starring in movies directed by and starring william shatner"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?x dbo:director res:William_Shatner ; dbo:starring res:William_Shatner { ?x dbo:starring ?uri } UNION { ?x dbp:starring ?uri } }', 'type': 'SPARQL', 'confidence': 0.66, 'relations': ['director', 'starring'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(g / give-01 :mode imperative :ARG0 (y / you) :ARG1 (p / person :ARG0-of (a / act-01) :mod (a2 / all) :ARG1-of (s / star-01 :ARG2 (m / movie :ARG1-of (d / direct-01 :ARG0 (p2 / person :name (n / name :op1 \"William\" :op2 \"Shatner\"))) :ARG2-of (s2 / star-01 :ARG1 p2)))) :ARG2 (i / i))', 'type': 'AMR', 'confidence': 0.3, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-5: qué estados de eeuu se encuentran en la misma zona horaria que utah"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(b / be-located-at-91 :ARG1 (s / state :mod (a / amr-unknown) :mod (c / country :name (n / name :op1 \"U.S.\"))) :ARG2 (t / timezone :ARG1-of (s2 / same-01 :ARG2 (t2 / timezone :location-of (s3 / state :name (n2 / name :op1 \"Utah\"))))))', 'type': 'AMR', 'confidence': 0.48, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { res:Utah dbp:timezone ?x . ?uri rdf:type yago:WikicatStatesOfTheUnitedStates ; dbp:timezone ?x FILTER ( ?uri != res:Utah ) }', 'type': 'SPARQL', 'confidence': 0.1, 'relations': ['type', 'timeZone', 'type'], 'verification': [False, True, False]}]"
            },
            {
                "role": "user",
                "content": "Example-6: who is the daughter of ingrid bergman married to"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': 'PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Ingrid_Bergman dbo:child ?child . ?child <http://dbpedia.org/property/spouse> ?uri }', 'type': 'SPARQL', 'confidence': 0.92, 'relations': ['spouse', 'child'], 'verification': [True, True]}, {'rank': 2, 'prediction': '(m / marry-01 :ARG1 (p / person :ARG0-of (h / have-rel-role-91 :ARG1 (p2 / person :name (n / name :op1 \"Ingrid\" :op2 \"Bergman\")) :ARG2 (d / daughter))) :ARG2 (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.08, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "Example-7: quién es el jugador más alto de los atlanta falcons"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(h / have-degree-91 :ARG1 (a / amr-unknown) :ARG2 (t / tall) :ARG3 (m / most) :ARG5 (p3 / person :ARG0-of (h2 / have-org-role-91 :ARG1 (t2 / team :name (n / name :op1 \"Atlanta\" :op2 \"Falcons\")) :ARG3 (p2 / play-01 :ARG0 p3))))', 'type': 'AMR', 'confidence': 0.47, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': 'SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Atlanta_Falcons> ; <http://dbpedia.org/ontology/height> ?h } ORDER BY DESC(?h) OFFSET 0 LIMIT 1', 'type': 'SPARQL', 'confidence': 0.3, 'relations': ['team', 'height'], 'verification': [True, True]}]"
            },
            {
                "role": "user",
                "content": "Example-8: what is the crime rate in los angeles"
            },
            {
                "role": "assistant",
                "content": "[{'rank': 1, 'prediction': '(r / rate-entity-91 :ARG1 (c / crime-02) :ARG2 (y / year) :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")))', 'type': 'AMR', 'confidence': 0.63, 'relations': [], 'verification': []}, {'rank': 2, 'prediction': '(c / crime-02 :location (c2 / city :name (n / name :op1 \"Los\" :op2 \"Angeles\")) :frequency (a / amr-unknown))', 'type': 'AMR', 'confidence': 0.2, 'relations': [], 'verification': []}]"
            },
            {
                "role": "user",
                "content": "kas yra „universal studios“ savininkas"
            }
        ],
        "gold_amr": "(o / own-01 :ARG0 (a / amr-unknown) :ARG1 (c / company :name (n / name :op1 \"Universal\" :op2 \"Studios\")))",
        "gold_sparql": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Universal_Studios dbo:owner ?uri }",
        "question": "kas yra „universal studios“ savininkas",
        "language": "lt",
        "manipulated": 1,
        "rel_excluded": "owner"
    }
]